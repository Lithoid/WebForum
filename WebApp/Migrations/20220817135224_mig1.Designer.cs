// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20220817135224_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("message");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("roleName");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a44ef7d-9663-46a5-aed1-ffb8e3c32484"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("0521ab81-4170-46e2-962c-f0098bf39f6e"),
                            RoleName = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("fd73f38b-eefd-4a3f-84fd-981c74604e90"),
                            RoleName = "Member"
                        });
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8b4b888-eaaa-4adb-8ddf-f4a226d42f85"),
                            DateCreated = new DateTime(2022, 8, 17, 16, 52, 24, 102, DateTimeKind.Local).AddTicks(4904),
                            Name = "Games",
                            UserId = new Guid("d99ecc7a-a269-41f4-9365-a007dc71e052")
                        },
                        new
                        {
                            Id = new Guid("e4c5cee7-4f3d-41d6-8b6f-976c024b4cec"),
                            DateCreated = new DateTime(2022, 8, 17, 16, 52, 24, 102, DateTimeKind.Local).AddTicks(4943),
                            Name = "Movies",
                            UserId = new Guid("d99ecc7a-a269-41f4-9365-a007dc71e052")
                        },
                        new
                        {
                            Id = new Guid("39345799-a55d-4d1c-be76-fcacd9ab01c9"),
                            DateCreated = new DateTime(2022, 8, 17, 16, 52, 24, 102, DateTimeKind.Local).AddTicks(4950),
                            Name = "Books",
                            UserId = new Guid("d99ecc7a-a269-41f4-9365-a007dc71e052")
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pass");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d99ecc7a-a269-41f4-9365-a007dc71e052"),
                            Email = "admin@gmail.com",
                            Name = "admin",
                            Password = "Qwerty123",
                            RoleId = new Guid("8a44ef7d-9663-46a5-aed1-ffb8e3c32484")
                        },
                        new
                        {
                            Id = new Guid("af43393d-626b-48ef-85ad-51805c74ccff"),
                            Email = "moderator@gmail.com",
                            Name = "moderator",
                            Password = "Qwerty123",
                            RoleId = new Guid("0521ab81-4170-46e2-962c-f0098bf39f6e")
                        },
                        new
                        {
                            Id = new Guid("ef48d23f-a212-4816-aec3-f612958771b3"),
                            Email = "user@gmail.com",
                            Name = "user",
                            Password = "Qwerty123",
                            RoleId = new Guid("fd73f38b-eefd-4a3f-84fd-981c74604e90")
                        });
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.HasOne("Entities.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
