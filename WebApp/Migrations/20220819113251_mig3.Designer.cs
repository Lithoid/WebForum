// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20220819113251_mig3")]
    partial class mig3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("message");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("roleName");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e28d3cdd-2733-496f-a2e2-63049373a835"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("7709f148-53d9-49b4-a2c6-38eb13b20981"),
                            RoleName = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("c2980fbe-d56c-434e-9a5b-96e0c60ef962"),
                            RoleName = "Member"
                        });
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d37f55a9-8911-4e9e-b737-ad878b29cfae"),
                            DateCreated = new DateTime(2022, 8, 19, 14, 32, 51, 292, DateTimeKind.Local).AddTicks(9334),
                            Name = "Games",
                            UserId = new Guid("e660598e-ee24-437b-b69b-f58aa1aaaf29")
                        },
                        new
                        {
                            Id = new Guid("d5818c14-5fdc-4f4a-a49a-cd0d68208fe5"),
                            DateCreated = new DateTime(2022, 8, 19, 14, 32, 51, 292, DateTimeKind.Local).AddTicks(9383),
                            Name = "Movies",
                            UserId = new Guid("e660598e-ee24-437b-b69b-f58aa1aaaf29")
                        },
                        new
                        {
                            Id = new Guid("f95880a6-98e1-4df2-b05f-bb63c28a958e"),
                            DateCreated = new DateTime(2022, 8, 19, 14, 32, 51, 292, DateTimeKind.Local).AddTicks(9386),
                            Name = "Books",
                            UserId = new Guid("e660598e-ee24-437b-b69b-f58aa1aaaf29")
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pass");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e660598e-ee24-437b-b69b-f58aa1aaaf29"),
                            Email = "admin@gmail.com",
                            Name = "admin",
                            Password = "Qwerty123",
                            RoleId = new Guid("e28d3cdd-2733-496f-a2e2-63049373a835")
                        },
                        new
                        {
                            Id = new Guid("47ef093b-54a6-4dca-a541-abcc7950e521"),
                            Email = "moderator@gmail.com",
                            Name = "moderator",
                            Password = "Qwerty123",
                            RoleId = new Guid("7709f148-53d9-49b4-a2c6-38eb13b20981")
                        },
                        new
                        {
                            Id = new Guid("032cbb67-9d6f-472a-878f-b026a9777ab0"),
                            Email = "user@gmail.com",
                            Name = "user",
                            Password = "Qwerty123",
                            RoleId = new Guid("c2980fbe-d56c-434e-9a5b-96e0c60ef962")
                        });
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.HasOne("Entities.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
