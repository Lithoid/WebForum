// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20220819142528_mig4")]
    partial class mig4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("message");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("roleName");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e551dcb-8efa-478f-aa2c-2ce9a87e49c1"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("98c722a8-2294-48ed-9803-956c61069b5c"),
                            RoleName = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("4de27497-5ac3-4c70-8031-d728faacd237"),
                            RoleName = "Member"
                        });
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed87ff61-0c31-4919-abc8-8601bfbf2aeb"),
                            DateCreated = new DateTime(2022, 8, 19, 17, 25, 28, 567, DateTimeKind.Local).AddTicks(5348),
                            Name = "Games",
                            UserId = new Guid("d0f8b2f4-95ef-45f2-a5c8-4d1e87a733d7")
                        },
                        new
                        {
                            Id = new Guid("60c4e9ea-b14e-4a91-8eb4-3cd56d143852"),
                            DateCreated = new DateTime(2022, 8, 19, 17, 25, 28, 567, DateTimeKind.Local).AddTicks(5382),
                            Name = "Movies",
                            UserId = new Guid("d0f8b2f4-95ef-45f2-a5c8-4d1e87a733d7")
                        },
                        new
                        {
                            Id = new Guid("dd83b9cf-a5ca-4db8-9e56-928b38c65a27"),
                            DateCreated = new DateTime(2022, 8, 19, 17, 25, 28, 567, DateTimeKind.Local).AddTicks(5426),
                            Name = "Books",
                            UserId = new Guid("d0f8b2f4-95ef-45f2-a5c8-4d1e87a733d7")
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("authToken");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("isConfirmed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pass");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0f8b2f4-95ef-45f2-a5c8-4d1e87a733d7"),
                            AuthToken = "test",
                            Email = "admin@gmail.com",
                            IsConfirmed = true,
                            Name = "admin",
                            Password = "Qwerty123",
                            RoleId = new Guid("5e551dcb-8efa-478f-aa2c-2ce9a87e49c1")
                        },
                        new
                        {
                            Id = new Guid("beed58df-bf14-4890-b434-71942e759585"),
                            AuthToken = "test",
                            Email = "moderator@gmail.com",
                            IsConfirmed = true,
                            Name = "moderator",
                            Password = "Qwerty123",
                            RoleId = new Guid("98c722a8-2294-48ed-9803-956c61069b5c")
                        },
                        new
                        {
                            Id = new Guid("16917eeb-e3d2-4449-8f16-0240754238c6"),
                            AuthToken = "test",
                            Email = "user@gmail.com",
                            IsConfirmed = true,
                            Name = "user",
                            Password = "Qwerty123",
                            RoleId = new Guid("4de27497-5ac3-4c70-8031-d728faacd237")
                        });
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.HasOne("Entities.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
