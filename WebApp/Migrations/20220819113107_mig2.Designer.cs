// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20220819113107_mig2")]
    partial class mig2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("message");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("roleName");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb9e072e-dfd4-4034-be5e-1d54d4884d03"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("7cf51824-66c3-490b-ae97-7187c7641659"),
                            RoleName = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("62f2129e-10e0-47ca-9503-6c977ddf58e3"),
                            RoleName = "Member"
                        });
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3cde0281-e897-4b1a-bbc0-94723f47103c"),
                            DateCreated = new DateTime(2022, 8, 19, 14, 31, 7, 14, DateTimeKind.Local).AddTicks(5303),
                            Name = "Games",
                            UserId = new Guid("2541701c-dfc7-4f0b-9bb3-968f444ec456")
                        },
                        new
                        {
                            Id = new Guid("96b0863c-4358-4c1b-b5ad-32f793638452"),
                            DateCreated = new DateTime(2022, 8, 19, 14, 31, 7, 14, DateTimeKind.Local).AddTicks(5335),
                            Name = "Movies",
                            UserId = new Guid("2541701c-dfc7-4f0b-9bb3-968f444ec456")
                        },
                        new
                        {
                            Id = new Guid("c9e8e922-9b1a-4002-8b4a-131c861b8247"),
                            DateCreated = new DateTime(2022, 8, 19, 14, 31, 7, 14, DateTimeKind.Local).AddTicks(5341),
                            Name = "Books",
                            UserId = new Guid("2541701c-dfc7-4f0b-9bb3-968f444ec456")
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pass");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2541701c-dfc7-4f0b-9bb3-968f444ec456"),
                            Email = "admin@gmail.com",
                            Name = "admin",
                            Password = "Qwerty123",
                            RoleId = new Guid("cb9e072e-dfd4-4034-be5e-1d54d4884d03")
                        },
                        new
                        {
                            Id = new Guid("92302743-69af-4ffc-a470-1e17679c742c"),
                            Email = "moderator@gmail.com",
                            Name = "moderator",
                            Password = "Qwerty123",
                            RoleId = new Guid("7cf51824-66c3-490b-ae97-7187c7641659")
                        },
                        new
                        {
                            Id = new Guid("f412b18e-30af-4e77-9334-347dfdfcc184"),
                            Email = "user@gmail.com",
                            Name = "user",
                            Password = "Qwerty123",
                            RoleId = new Guid("62f2129e-10e0-47ca-9503-6c977ddf58e3")
                        });
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.HasOne("Entities.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Topic", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
